{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{251:function(o,e,n){\"use strict\";n.r(e);var t=n(28),_=Object(t.a)({},(function(){var o=this,e=o.$createElement,n=o._self._c||e;return n(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":o.$parent.slotKey}},[n(\"h2\",{attrs:{id:\"笔记\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#笔记\"}},[o._v(\"#\")]),o._v(\" 笔记\")]),o._v(\" \"),n(\"p\",[o._v(\"根据 Python 官方文档，数据类型和容器其实都统称为「数据类型」，但是为了能让读者便于理解和区分，我还是将其拆为两部分。\")]),o._v(\" \"),n(\"p\",[o._v(\"如果你对现在主流的编程语言有过了解，那么你就会发现这些语言存在一些共同点，其中必不可少的就是数据类型和容器。\")]),o._v(\" \"),n(\"p\",[o._v(\"所谓的数据类型和容器其实在理解上很直接，前者表示对应的类型而后者好似器皿可以容纳东西。因此，通常对于数据类型往往是针对单个值而言的，而容器则是容纳多个单值（类型可能相同，也可能不同）的器皿。\")]),o._v(\" \"),n(\"p\",[o._v(\"首先说说数据类型。为什么要强调数据类型，那是因为这是要和计算机「约法三章」。举个例子：\")]),o._v(\" \"),n(\"p\",[o._v(\"1+1 #第一种\\n'1+1' #第二种\\n以上对于 1+1 的表示方法其实分别代表了不同的数据类型。第一种表示的就是我们数学上的数值 1+1 的概念；第二种如果让人来理解其实也就是数学上的 1+1，但是如果让计算机来理解，不好意思，这不是数值 1+1 ，而是一个字符串（String），就表示 '1+1' 这个文本。\")]),o._v(\" \"),n(\"p\",[o._v(\"所以在计算机程序的世界里，它只会理解符合它被预先设定的某些编码（Codes），仍不能做到像人一样很聪明地去理解不同的表示方法。因此我们在编程时，就需要事先声明（Statement）某个代码它的类型是什么，然后通过编译器将代码转换成计算机能理解的形式并被计算机执行。\")]),o._v(\" \"),n(\"p\",[o._v(\"但好在很多语言都有自动类型推断机制，比如 Scala、Go 等，Python 本身也具备这样的功能，所以它能聪明地帮我们将输入的每个数字或字符在底层指定成相应的类型，因此上面的例子其实就等价于下面的情况：\")]),o._v(\" \"),n(\"p\",[o._v(\"a = 1+1 #数值\\nb = '1+1' #字符串\\n然而在其他一些编译型语言中，如 Java 语言，我们必须要事先指定类型，才能保证编译通过：\")]),o._v(\" \"),n(\"p\",[o._v('int a = 11;\\nString b = \"1+1\";\\n在这里 int 表示整型（Integer），其实就是我们小学学的整数概念；而 String 就是表示字符串类型。')]),o._v(\" \"),n(\"p\",[o._v(\"接下来聊聊容器。\")]),o._v(\" \"),n(\"p\",[o._v(\"容器的概念其实比数据类型更好理解一些，在现实世界中，我们可以找到无数个容器的实物，比如杯子、脸盆、饭锅等，其实都属于可以用来「装东西」的容器。所以在编程语言里容器的作用也和现实世界中的作用相一致，它可以用来存放许多不同数据类型的东西。\")]),o._v(\" \"),n(\"p\",[o._v(\"比如 Python 中的 list 列表就是容器的一种，我们可以用它来存储许多的数值或字符串甚至是另一种容器：\")]),o._v(\" \"),n(\"blockquote\",[n(\"blockquote\",[n(\"blockquote\",[n(\"p\",[o._v(\"myList = [1+1, '1+1', [1,2,3,4,5]]\\nprint(myList)\\n[2, '1+1', [1, 2, 3, 4, 5]]\\n除了列表之外，在 Python 中还有元组、字典、集合等，这些常见的容器可能也会以不同的表现形式出现在其他编程语言之中，但它们本质上都是殊途同归的。\")])])])]),o._v(\" \"),n(\"ol\",{attrs:{start:\"2\"}},[n(\"li\",[o._v(\"Python 中的常用数据类型\\nPython 中的基本数据类型主要有以下几类：\")])]),o._v(\" \"),n(\"p\",[o._v(\"整型（int）\\n浮点型（float）\\n复数（complex）\\n布尔值（bool）\\n其中整型、浮点型和复数都属于数值型，而布尔值仅表示 false 和true 这两类值的类型。我们可以使用 Python 中内置的 type() 函数来查看某个值属于什么类型。\")]),o._v(\" \"),n(\"p\",[o._v(\"整型在上一节中我们有提到过，其实就是我们小学数学课上的的整数，包括正整数和负整数，总而言之就是不带任何小数点的数都属于整数。\")]),o._v(\" \"),n(\"blockquote\",[n(\"blockquote\",[n(\"blockquote\",[n(\"p\",[o._v(\"type(1+1) #int\\n<class 'int'>\\n浮点型其实就带小数的数值，只要在数值后带有小数点，就属于浮点型。\")])])])]),o._v(\" \"),n(\"blockquote\",[n(\"blockquote\",[n(\"blockquote\",[n(\"p\",[o._v(\"type(1.0) #float\\n<class 'float'>\")])])]),o._v(\" \"),n(\"blockquote\",[n(\"blockquote\",[n(\"p\",[o._v(\"type(3.14159267) #float\\n<class 'float'>\\n这里我们可以看到尽管 1.0 在人看来其实就是数值 1，但是在计算机看来其实和整数 1 其实还是有所不同的。\")])])])]),o._v(\" \"),n(\"p\",[o._v(\"复数就是高中我们学习的复数概念，要是没有了解过这个概念也没关系，因为如果不是做有关科学计算或者数学计算，通常来说这种类型使用较少：\")]),o._v(\" \"),n(\"blockquote\",[n(\"blockquote\",[n(\"blockquote\",[n(\"p\",[o._v(\"type(1+4j) #complex\\n<class 'complex'>\\n布尔值其实就是和物理学中的一些物理量，如牛顿（N）、瓦特（W）一样是根据某个人来命名，这个人叫乔治·布尔，因为他首先定义了代数逻辑系统（见 维基百科介绍）。\")])])])]),o._v(\" \"),n(\"blockquote\",[n(\"blockquote\",[n(\"blockquote\",[n(\"p\",[o._v(\"type(True) #bool\\n<class 'bool'>\")])])]),o._v(\" \"),n(\"blockquote\",[n(\"blockquote\",[n(\"p\",[o._v(\"type(False) #bool\\n<class 'bool'>\\n通常来说，布尔值就只有两种情况：0 或 1。但我们要回想中学数学学过的一些逻辑命题，我们应该都有做过类似判断命题真假的题目。\")])])])]),o._v(\" \"),n(\"p\",[o._v(\"所以我们就有了 真（True）=1、假（False）=0 这样的关联，真与假其实也可以延申为是与否、成立与不成立。因此从布尔值的逻辑判断情况就成了 是（成立、真）=1，而它的相反情况就是 否（不成立、假）=0\")]),o._v(\" \"),n(\"p\",[o._v(\"在 Python 中尽管我们需要以 True 或False 来表达布尔值，但是在后面的控制条件章节中，其实就可以直接以整数 1 或 0 来代表真与假两种条件。\")]),o._v(\" \"),n(\"ol\",{attrs:{start:\"3\"}},[n(\"li\",[o._v(\"Python 中的常用数据容器\\n在 Python 中的容器类型有很多，比如：\")])]),o._v(\" \"),n(\"p\",[o._v(\"序列类型：列表（list）、元组（tuple）\\n文本序列类型：字符串（str）\\n二进制序列类型：字节（Bytes）\\n集合类型：集合（set）\\n映射类型：字典（dict）\\n以上是我简单列举的常见的容器类型，当然我们主要涉及的是序列类型、文本序列类型、集合类型和映射类型四种。其中有关于文本序列类型的字符串类型会在后面单独成篇，本节就不过多涉及。\")]),o._v(\" \"),n(\"p\",[o._v(\"3.1 序列类型：列表、元组\\n3.1.1 创建\\n列表（list）和元组（tuple）在表现形式上十分类似，但是创建形式会有所区别。\")]),o._v(\" \"),n(\"p\",[o._v(\"我们都可以分别用不同类型的括号和关键字来创建：\")]),o._v(\" \"),n(\"h2\",{attrs:{id:\"方括号创建列表、圆括号创建元组\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#方括号创建列表、圆括号创建元组\"}},[o._v(\"#\")]),o._v(\" 方括号创建列表、圆括号创建元组\")]),o._v(\" \"),n(\"p\",[o._v(\"myList1 = [1,2,3,4]\\nmyTuple1 = (1,2,3,4)\")]),o._v(\" \"),n(\"h2\",{attrs:{id:\"list-关键字创建列表，tuple-创建元组\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#list-关键字创建列表，tuple-创建元组\"}},[o._v(\"#\")]),o._v(\" list 关键字创建列表，tuple 创建元组\")]),o._v(\" \"),n(\"p\",[o._v(\"myList2 = list('abcde')\\nmyTuple2 = tuple('abcde')\\n可以看到列表和元组在创建和表现形式上都十分相似，但二者的区别在于：是否可以修改。其中列表是可修改，而元组则不能。因此列表是实际中最常使用的容器类型。\")]),o._v(\" \"),n(\"p\",[o._v(\"而使用关键字来创建往往是将某个容器类型转换成另外一种容器类型时才会使用到关键字，通常情况下我们通过对应的符号来创建即可。\")]),o._v(\" \"),n(\"p\",[o._v(\"所以为了便于行文，我就围绕列表展开。\")]),o._v(\" \"),n(\"p\",[o._v(\"3.1.2 索引切片\\n索引和切片其实是从数据容器中提取数据的两个动作或者是过程。\")]),o._v(\" \"),n(\"p\",[o._v(\"索引你可以理解成是电影票上的座位号，它对应的是点；那么切片顾名思义也就是一片、一块，对应的是段。\")]),o._v(\" \"),n(\"p\",[o._v(\"在 Python 中，无论是遍历（后面我们会讲到）、索引、切片，都是从「0」开始。这可能与我们在数数（shǔshù）时的认知有点相悖，但是只要记住「从零开始」这句话即可。\")]),o._v(\" \"),n(\"p\",[o._v(\"假设医生给了我一盒药，里面有五颗药丸，每颗药丸都带有标签分别是 「one」、「two」、「three」、「four」、「five」，分别对应示意图里的 A、B、C、D、E。\")]),o._v(\" \"),n(\"blockquote\",[n(\"blockquote\",[n(\"blockquote\",[n(\"p\",[o._v(\"box = ['one', 'two', 'three', 'four', 'five']\\n那么他们在药盒子中对应的位置就是 0-4。\")])])])]),o._v(\" \"),n(\"p\",[o._v(\"思考：从 0 到 3 有几个整数？\")]),o._v(\" \"),n(\"p\",[o._v(\"此时，今天如果我要吃药丸「one」。那么需要将其从中拿出，通过示意图我们可以知道，列表中的元素位置都是固定的。刚好药丸「one」又在第一个，那我这时从中取出就应该是「索引」：\")]),o._v(\" \"),n(\"blockquote\",[n(\"blockquote\",[n(\"blockquote\",[n(\"p\",[o._v(\"box[0]\\n'one'\\n但是医生说，我不能只吃一粒，要吃三粒，那么我就应该用上「切片」：\")])])])]),o._v(\" \"),n(\"blockquote\",[n(\"blockquote\",[n(\"blockquote\",[n(\"p\",[o._v(\"box[0:3] #显示 one、two、three\\n['one', 'two', 'three']\\n回到我前面说的那个思考题，0 到 3 一共有几个整数呢？\")])])])]),o._v(\" \"),n(\"p\",[o._v(\"答案是 4 个。可按理来说我们用 box[0:3] 应该是把前 4 个药丸都拿出来了，可是为什么只显示 3 个呢？\")]),o._v(\" \"),n(\"p\",[o._v(\"那是因为切片遵循着左闭右开的数学法则。回想一下我们在中学数学的课本里学过「区间」这一概念，这里我就用数学上的集合图给你表示一下就清楚了。\")]),o._v(\" \"),n(\"p\",[o._v(\"所以在这里我们使用 box[0:3] 其实就是相当于数学上区间 ([0,3))。由于在索引 3 上取不到，所以只能取 0、1、2 三个点上的数据。这就是切片用法 。\")]),o._v(\" \"),n(\"p\",[o._v(\"思考：我如何切片才能够囊括药丸「four」？\")]),o._v(\" \"),n(\"p\",[o._v(\"3.1.3 列表和元组方法\\n列表和元组的操作方法也大致类似，只不过由于元组属于不可变序列，因此能够使用的方法较列表少一些，即列表能用的方法元组不一定能用，元组能用的方法列表一定可以用。\")]),o._v(\" \"),n(\"p\",[o._v(\"这里主要涉及几个方法：\")]),o._v(\" \"),n(\"p\",[o._v(\"增：append、extend\\n删：remove、pop\\n查：index\\n我们通过一个小例子来进行所有操作，首先我们先建立一个购物清单列表 apple，在列表中我存入了一些数据。\")]),o._v(\" \"),n(\"blockquote\",[n(\"blockquote\",[n(\"blockquote\",[n(\"p\",[o._v(\"apple = ['iPhone', 'iPad', 'MacBook', 'Apple Watch',\\n...          'Mac Pro', 'iMac', 'Mac mini', 'iMac Pro']\")])])]),o._v(\" \"),n(\"blockquote\",[n(\"blockquote\",[n(\"p\",[o._v(\"apple.append('iPod') # 1\\napple.extend(['iPhone 11 Pro']) #2\\napple.remove('iMac Pro') #3\\napple.pop() #默认弹出最后一个 #4\\n'iPhone 11 Pro'\")])])]),o._v(\" \"),n(\"blockquote\",[n(\"blockquote\",[n(\"p\",[o._v(\"apple.pop(2) #弹出第3个元素\\n'MacBook'\")])])]),o._v(\" \"),n(\"blockquote\",[n(\"blockquote\",[n(\"p\",[o._v(\"apple.index('Mac mini') #5\\n5\\n以上操作详解如下：\")])])])]),o._v(\" \"),n(\"p\",[o._v(\"使用 append() 方法将 iPod 追加到 apple 这个列表中\\n使用 extend() 方法将 iPhone 11 Pro 扩展到 apple 这个列表中\\n使用 remove() 方法将 iMac Pro 从 apple 列表中移除\\n使用 pop() 方法弹出 apple 列表中的项目，不指定索引数时是默认弹出最后一个元素，使用 pop(2) 则是弹出第三个元素 MacBook\\n使用 index()方法来查看元素在列表中的位置，apple.index('Mac mini') 即返回 apple 列表中 Mac mini 的索引数\\n3.2 映射序列类型：字典\\n字典是 Python 内置的容器中比较灵活的一种，也是常用的数据结构之一，字典你可以看做是列表的进阶版。\")]),o._v(\" \"),n(\"p\",[o._v(\"顾名思义，你可以将字典近似理解成我们小学上语文课用到的「中华字典」。尽管形式上可能会有点差异，但是本质十分相近。\")]),o._v(\" \"),n(\"p\",[o._v(\"3.2.1 键值对\\n说字典灵活是因为它可以将列表、甚至自身的字典类型容纳进去。但无论容纳的东西有多少，都只用唯一一个「键」（key）来关联。\")]),o._v(\" \"),n(\"p\",[o._v(\"字典示意图\\n字典示意图\\n所以要理解字典，就需要先对「键-值」对的形式有所认识。所谓的「键-值」对就是在字典中每一个键对应着一个值，这个值可以是单值也可以是个容器，但这些值对应的有且仅有一个键。\")]),o._v(\" \"),n(\"p\",[o._v(\"形象理解就是：每个人都只会有唯一的一个公民身份证号，在这个身份证号之下关联着我们许许多多的个人信息。\")]),o._v(\" \"),n(\"p\",[o._v(\"比如我现在有以下这么一个字典：\")]),o._v(\" \"),n(\"blockquote\",[n(\"blockquote\",[n(\"blockquote\",[n(\"p\",[o._v(\"info = {\\n...     'name': '100gle',\\n...     'personal_info': {\\n...         'slogen': '自律即自由',\\n...         'gender': 'male'\\n...     },\\n...     100: 'Hello, world!',\\n...     100: 'Hello, sspai!',\\n...     'money': [1000, 10000, 100000]\\n... }\\n最后结果则是这样的：\")])])])]),o._v(\" \"),n(\"blockquote\",[n(\"blockquote\",[n(\"blockquote\",[n(\"p\",[o._v(\"from pprint import pprint\\npprint(info)\\n{100: 'Hello, sspai!',\\n'money': [1000, 10000, 100000],\\n'name': '100gle',\\n'personal_info': {'gender': 'male', 'slogen': '自律即自由'}}\\n通过我这个 info 字典我们可以的字典的一些特性：\")])])])]),o._v(\" \"),n(\"p\",[o._v(\"可以容纳自身字典类型。info['personal_info'] 本身又是一个字典\\n键（Key）是唯一的。info 中的两个 100 的键，只有最后一个被保留了下来\\n可包含的数据类型包括字符串、数值、列表等。\\n键可以是字符串也可以是数字\\n所以你可以从这当中看出字典的灵活性，而且具有很清晰的结构性。\")]),o._v(\" \"),n(\"p\",[o._v(\"3.2.2 创建\\n创建字典和集合与创建列表和元组一样，都可以通过不同的括号和关键字来进行创建。\")]),o._v(\" \"),n(\"h2\",{attrs:{id:\"使用花括号加键值对创建字典\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#使用花括号加键值对创建字典\"}},[o._v(\"#\")]),o._v(\" 使用花括号加键值对创建字典\")]),o._v(\" \"),n(\"blockquote\",[n(\"blockquote\",[n(\"blockquote\",[n(\"p\",[o._v('myDict1 = {\"host\": \"sspai\"} #字典')])])])]),o._v(\" \"),n(\"h2\",{attrs:{id:\"使用-dict-关键字创建字典\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#使用-dict-关键字创建字典\"}},[o._v(\"#\")]),o._v(\" 使用 dict 关键字创建字典\")]),o._v(\" \"),n(\"blockquote\",[n(\"blockquote\",[n(\"blockquote\",[n(\"p\",[o._v('myDict2 = dict(host=\"sspai\")\\n3.2.3 索引\\n由于键值对的特性，所以字典就不能像列表那样可以直接切片获得数据。因此如果你要从字典中获取数据，就只能通过索引来获取键下面对应的值。')])])])]),o._v(\" \"),n(\"blockquote\",[n(\"blockquote\",[n(\"blockquote\",[n(\"p\",[o._v(\"info['name'] #返回 100gle\\n'100gle'\")])])]),o._v(\" \"),n(\"blockquote\",[n(\"blockquote\",[n(\"p\",[o._v(\"info[100] #返回 Hello, sspai!\\n'Hello, sspai!'\\n3.2.4 字典方法\\n字典的方法也有很多，这里主要介绍常用的几个。首先我们还是新建一个示例数据info\")])])])]),o._v(\" \"),n(\"blockquote\",[n(\"blockquote\",[n(\"blockquote\",[n(\"p\",[o._v(\"info = {\\n...     'name': '100gle',\\n...     'telephone': '021-XXXX-XXXX',\\n...     'gender': 'male',\\n...     'email': 'xiaoyue.lin@outlook.com'\\n... }\")])])]),o._v(\" \"),n(\"blockquote\",[n(\"blockquote\",[n(\"p\",[o._v(\"info.keys() #1\\ndict_keys(['name', 'telephone', 'gender', 'email'])\")])])]),o._v(\" \"),n(\"blockquote\",[n(\"blockquote\",[n(\"p\",[o._v(\"info.values() #2\\ndict_values(['100gle', '021-XXXX-XXXX', 'male', 'xiaoyue.lin@outlook.com'])\")])])]),o._v(\" \"),n(\"blockquote\",[n(\"blockquote\",[n(\"p\",[o._v(\"info2 = dict(id=0) #3\\ninfo.update(info2) #3\\nprint(info)\\n{'name': '100gle', 'telephone': '021-XXXX-XXXX', 'gender': 'male', 'email': 'xiaoyue.lin@outlook.com', 'id': 0}\\n以上操作详解如下：\")])])])]),o._v(\" \"),n(\"p\",[o._v(\"使用 keys() 方法来获取字典中的所有键（key）\\n使用 values() 方法来获取字典中所有的值（value）\\n新建一个字典 info2，然后使用 update() 方法将 info2 中的数据更新到 info 中。\\n3.3 集合序列类型：集合\\n集合在外形上和字典也十分类似，都是用花括号来表示。\")]),o._v(\" \"),n(\"p\",[o._v(\"集合就是数学中的集合概念，它虽然也像元组那样有所限制，但是它的适用场景可比元组要好得多。\")]),o._v(\" \"),n(\"p\",[o._v(\"集合实际上也还是我们中学时候学过的集合概念，但是它实际的功能是起着「交集」的作用。\")]),o._v(\" \"),n(\"p\",[o._v(\"在示意图中可以很清楚地知道，A 和 B 相交得到的数字集就是集合。\")]),o._v(\" \"),n(\"p\",[o._v(\"3.3.1 创建\\n我们可以通过 {} 花括号和 set() 关键字来进行创建集合。要注意的是，在使用花括号时，没有传入键值对而是传入值创建的才是集合，否则创建的是字典。\")]),o._v(\" \"),n(\"blockquote\",[n(\"blockquote\",[n(\"blockquote\",[n(\"p\",[o._v(\"a = {}\\ntype(a)\\n<class 'dict'>\")])])]),o._v(\" \"),n(\"blockquote\",[n(\"blockquote\",[n(\"p\",[o._v(\"b = {1,2}\\ntype(b)\\n<class 'set'>\\n3.3.2 集合方法\\n集合的概念由于和数学上集合的概念相一致，所以集合的一系列方法最主要也是围绕着集合与集合间的操作进行。\")])])])]),o._v(\" \"),n(\"blockquote\",[n(\"blockquote\",[n(\"blockquote\",[n(\"p\",[o._v(\"set1 = {'apple', 'google', 'microsoft'}\\nset2 = {'apple', 'huawei', 'oneplus'}\\nset1.add('Amazon') #1\\nset1.intersection(set2) #2\\n{'apple'}\")])])]),o._v(\" \"),n(\"blockquote\",[n(\"blockquote\",[n(\"p\",[o._v(\"set1.union(set2) #3\\n{'google', 'oneplus', 'apple', 'Amazon', 'microsoft', 'huawei'}\")])])]),o._v(\" \"),n(\"blockquote\",[n(\"blockquote\",[n(\"p\",[o._v(\"set1.difference(set2) #4\\n{'google', 'Amazon', 'microsoft'}\\n以上操作详解如下：\")])])])]),o._v(\" \"),n(\"p\",[o._v(\"向 set1 集合中添加元素 Amazon\\n求 set1 集合和 set2 集合的交集\\n求 set1 集合和 set2 集合的并集\\n求 set1 集合和 set2 集合的差集\\n用一张图来概括上面三种情况或许会更清楚一些：\")]),o._v(\" \"),n(\"p\",[o._v(\"交、并、差\\n相比于元组来说，集合的方法更多，并且也更具实用性。\")]),o._v(\" \"),n(\"ol\",{attrs:{start:\"4\"}},[n(\"li\",[o._v(\"实践案例：API 调用\\n作为一个学习者，在学习的过程中，除了具备自我学习的能力外，还应该能善于利用现有的资源来助力自身，这样才能算是优秀的学习者。\")])]),o._v(\" \"),n(\"p\",[o._v(\"所以本章我们主要去通过调用其他平台免费提供的第三方 API 接口来实现某些功能，如 OCR（光学字符识别）、文字转语音等。本次我们用 百度 AI 开放平台 的 API 进行实践，让大家也体验一次开发者的历程。除了百度之外，像高德、华为等互联网大厂，只要涉及到 API 之类的开发也都会提供相应的接口，因此本次实践完后再去使用其他平台的接口相信也难不倒我们。\")]),o._v(\" \"),n(\"p\",[o._v(\"4.1 API 应用申请\\n在使用其他平台的 API 之前，基本上毫无例外都要先注册并创建一个应用。打开百度 AI 开放平台的页面后，点击右上角控制台进行登录（没有注册账号的需要注册）。\")]),o._v(\" \"),n(\"p\",[o._v(\"百度 AI 开放平台\\n百度 AI 开放平台\\n进入到控制台之后我们就可以在左侧看到平台能提供的服务种类有很多，所以根据需要我们可以进入到不同接口的页面。这里我们就进入「文字识别」里就可以看到有关于该服务下的所有列表。\")]),o._v(\" \"),n(\"p\",[o._v(\"对于我们个人而言，每天的免费调用次数完全已经能够满足个人的使用需求。因此我们进一步点击创建应用。\")]),o._v(\" \"),n(\"p\",[o._v(\"在默认位置填入相应信息之后，我们就可以直接创建一个应用。创建完成点击查看应用详情，在这里我们只需要看最上面的一栏，当中包括了「AppID」、「API Key」、「Secret Key」等几项。其中这三项是我们能够调用接口的「身份证」。因此在使用的时候要将其传入。\")]),o._v(\" \"),n(\"p\",[o._v(\"创建好应用之后，我们就接着点击左侧的「SDK 下载」去下载配套的开发套件。所谓的 SDK 就是 Software Development Kit（软件开发工具包），这是平台为我们搭建好的一个开发框架，我们只需要调用即可，不需要自己额外搭建。这里要夸一夸百度，提供的 SDK 下载很丰富，而且从注册账号到创建应用的过程简单、直观，比华为云好太多太多。\")]),o._v(\" \"),n(\"p\",[o._v(\"我们找到 Python 的 SDK 之后进行下载，当然如果你觉得麻烦想一步到位那么也可以直接用pip install baidu-aip 进行安装。\")]),o._v(\" \"),n(\"p\",[o._v(\"除此之外我们还要打开 SDK 旁边对应使用说明。使用说明就相当于我们购买产品时附赠的说明书，上面有一切能够让你快速上手的介绍。由于平台提供的SDK不像其他第三方库一样有着详细的教程，所以在使用对应平台的API时就只有这一份说明文档仅供我们参考。\")]),o._v(\" \"),n(\"p\",[o._v(\"4.2 HTTP 请求与返回\\n在进入到实践环节之前，我们还要稍微了解一下有关于 HTTP 请求的几种方式以及返回结果。\")]),o._v(\" \"),n(\"p\",[o._v(\"所谓的 HTTP 就是「HyperText Transfer Protocol」（超文本传输协议）的简写，通过这种协议我们才能通过服务器来获取各种信息数据，这也就是为什么我们打开一个网站时要输入网址，然后页面会呈现一些内容的原因。\")]),o._v(\" \"),n(\"p\",[o._v(\"以少数派网站为例子，我们用 Chrome 浏览器登录到少数派官网，然后按下 F12 的开发者工具，然后跳转到 Networks 选项卡中，再刷新一次我们就可以看到随着页面的加载，同样会有很多资源不断地出现。\")]),o._v(\" \"),n(\"p\",[o._v(\"点击其中一个资源，再点击相应的 headers 选项，我们就可以看到该资源请求的相关信息了。\")]),o._v(\" \"),n(\"p\",[o._v(\"4.2.1 HTTP 请求方法\\n通常来说，HTTP请求的方式或者说方法包括但不限于以下几种：\")]),o._v(\" \"),n(\"p\",[o._v(\"GET\\nPOST\\nPUT\\nDELETE\\nPATCH\\n其中 GET 和 POST 方法最为常用。当然仅从单词的意思上我们就可以区分两者 GET 方法主要是用于向服务器获取数据，POST 方法则是向服务器提交或传递数据。\")]),o._v(\" \"),n(\"p\",[o._v(\"所以在调用接口时我们需要看一看开发文档的对于接口的请求说明，才能知道我们要以怎样提交我们的查询数据。\")]),o._v(\" \"),n(\"p\",[o._v(\"不过好在百度 AI 开放平台的接口的 SDK 已经为我们铺好这条路，我们只需要考虑提交的数据即可，就不需要考虑是以什么方式发送请求。但是在调用其他平台的接口时还是要阅读开发文档了解是以怎样的方式发送请求，否则可能会出错。\")]),o._v(\" \"),n(\"p\",[o._v(\"4.2.2 请求返回\\n在说明文档中与请求方法一起列出的就是返回结果，当中包含了请求结果的状态码以及其他信息，各个平台返回的结果可能不一样，这里就不一一细说，查阅相关开发文档即可。\")]),o._v(\" \"),n(\"p\",[o._v(\"目前通过 Web 请求得到的返回结果大多数是以 JSON 呈现。JSON 格式从外形上来理解就是「多层嵌套的字典」，也是现今较为流行的一种交换数据的格式。\")]),o._v(\" \"),n(\"p\",[o._v(\"虽然说 JSON 格式数据不是 Python 内置的标准数据容器，但是也提供了相应的 json 库用来专门处理这类数据并转化成我们熟悉的字典形式，等遇上的时候我们再谈具体细节。\")]),o._v(\" \"),n(\"p\",[o._v(\"一切就绪之后我们就可以进入到实践环节了。\")]),o._v(\" \"),n(\"p\",[o._v(\"4.3 OCR 识别\\n现在各种 OCR 应用或小程序有很多，如白描、天若 OCR 等，但总的来说核心功能无外乎就是将图片上的字符进行识别最后转换成文字。完成了前面的步骤之后，现在你也可以尝试调用百度 API 的接口，做一次自己的 OCR 识别。\")]),o._v(\" \"),n(\"p\",[o._v(\"在使用百度的 API 接口前，我们需要创建一个身份认证的对象，你可以简单理解为我们登录调用接口的一个账号。\")]),o._v(\" \"),n(\"p\",[o._v(\"这个账号的相关信息就是我们前面提到的在自己应用中的重要三项，即「AppID」、「API Key」、「Secret Key」这三项。根据百度的开发文档，我们使用 AipOcr 接口来实例化：\")]),o._v(\" \"),n(\"p\",[o._v(\"from aip import AipOcr #1\")]),o._v(\" \"),n(\"p\",[o._v('\"\"\" 替换成你的应用中的 APPID AK SK \"\"\"\\nAPP_ID = \\''),n(\"strong\",[n(\"strong\",[n(\"strong\",[n(\"strong\",[o._v(\"' #2\\nAPI_KEY = '\")])])])]),n(\"strong\",[n(\"strong\",[n(\"strong\",[n(\"strong\",[n(\"strong\",[n(\"strong\",[n(\"strong\",[n(\"strong\",[o._v(\"' #3\\nSECRET_KEY = '\")])])])])])])])]),o._v(\"****************' #4\\nclient = AipOcr(APP_ID, API_KEY, SECRET_KEY) #5\\n以上操作详解：\")]),o._v(\" \"),n(\"p\",[o._v(\"从百度的 aip 中导入 AipOcr 接口\\n创建调用接口所需的 APP_ID 字符串变量\\n创建调用接口所需的 API_KEY 字符串变量\\n创建调用接口所需的 SECRET_KEY 字符串变量\\n将创建好的字符串参数传入接口 AipOcr 中并创建一个操作对象 client\\n创建好登录对象之后我们就可以调用相关接口的实例方法。在这里我们还额外导入两个库用于辅助，一个是 pprint 库，它能将返回的 JSON 数据以层次分明的形式输出打印；还有一个就是我之前提到的 pandas 库，它当中提供的 json_normalize 函数特别好用，可以将 JSON 格式数据转换成结构化的数据。\")]),o._v(\" \"),n(\"p\",[o._v(\"from pprint import pprint #1\\nfrom pandas.io.json import json_normalize #2\\n以上操作详解：\")]),o._v(\" \"),n(\"p\",[o._v(\"从内置的 pprint 库中导入 pprint() 函数\\n从第三方Pandas 库中的 io.json 模块下导入 json_normalize\\n现在我们定义一个读取的函数，方便我们调用。为了能够将图片读入 Python 环境中，我们需要通过 with..open 的语句将待识别的图片以 rb 二进制的方式读入。因为我们传入的数据要以按开发文档的参数要求来，所以直接拿官方参考例子进行稍微修改即可。\")]),o._v(\" \"),n(\"p\",[o._v(\"这里就拿我买的东芝硬盘附赠的说明书图片进行测试，图片样例如下：\")]),o._v(\" \"),n(\"p\",[o._v(\"def get_file_content(filePath): #1\\nwith open(filePath, 'rb') as fp: #2\\nreturn fp.read() #3\\nimage = get_file_content(r'material/02-baidu-api/desc.jpeg') #4\\n以上操作详解：\")]),o._v(\" \"),n(\"p\",[o._v(\"定义一个名为get_file_content的函数，其参数为filePath 文件路径\\n在这个函数之下使用with open():的语句打开指定路径的文件，其中rb 表示read（只读）和binary（二进制形式）\\n最后用return语句返回使用read() 读取后的文件\\n调用定义好的get_file_content读取待识别图片，并将其赋值给image变量。\\n当然有兴趣的朋友可以打印一下看看image包含了什么东西，但是我并不建议这样做，因为一张图片经过二进制方式读入内容会十分庞杂，我们可以输出它的长度看看：\")]),o._v(\" \"),n(\"p\",[o._v(\"len(image) #返回168646 #1\\n以上操作详解：\")]),o._v(\" \"),n(\"p\",[o._v(\"使用内置的len()函数返回图像长度\\n完事具备之后我们就可以将参数传入某个接口了。这里我们就调用基础的通用文字识别接口然后再用pprint() 输出一下返回的结果：\")]),o._v(\" \"),n(\"blockquote\",[n(\"blockquote\",[n(\"blockquote\",[n(\"p\",[o._v(\"result = client.basicGeneral(image)# 1\\npprint(result) # 2\\n{'log_id': 3135391163860111749,\\n'words_result': [{'words': '您的权利'},\\n{'words': '某些州或省不允许排除或限制偶发性或后果性损失,所以上述限制或除外'},\\n{'words': '条款可能不适用您。此保固声明赋予您特定的法律权利,并且您可能拥有各'},\\n⋯⋯\\n{'words': '回的产品不包含受制于美国或您所在国出口管制的任何软件或技术。'},\\n{'words': '地理覆盖范围'},\\n{'words': '请访问URL以在线查看。tp:/www.toshiba-personalstorage.net/en/'},\\n{'words': 'support/download/hdd/ot_ idd/gc. htm)'},\\n{'words': '3'}],\\n'words_result_num': 24}\\n以上操作详情：\")])])])]),o._v(\" \"),n(\"p\",[o._v(\"调用前面创建好的client接口下的basicGeneral 通用识别接口，并将读取的待识别图片上传并将识别的结果赋值给result 变量\\n使用pprint() 函数美化输出并打印result 变量。\\n可以看出，输出的结果并不是我们预想那样格式规整地返回给我们，毕竟 OCR 目前只是识别文字，但是对于格式可能就没有那么高的精度；所以从识别的准确率来说已经是十分可观了。\")]),o._v(\" \"),n(\"p\",[o._v(\"到这一步来说还不算结束，因为我们虽然获取到了返回的识别结果，但是它仍然还是躺在 JSON数据格式中；所以就需要进一步将其结构化，这时json_normalize() 方法就排上用场了。这里我们从返回结果中的words_result进行结构化。\")]),o._v(\" \"),n(\"p\",[o._v(\"text = json_normalize(result['words_result']) #1\\n以上操作详解：\")]),o._v(\" \"),n(\"p\",[o._v(\"使用json_normalize() 方法对result 字典中的words_result 这一键下的值进行提取\\n接着我们再稍微text.head()输出一下前 5 个数据看看：\")]),o._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",[n(\"code\",[o._v(\"                           words\\n\")])])]),n(\"p\",[o._v(\"0                               您的权利\\n1   某些州或省不允许排除或限制偶发性或后果性损失,所以上述限制或除外\\n2  条款可能不适用您。此保固声明赋予您特定的法律权利,并且您可能拥有各\\n3  州或各省互不相同的其他权利。如果适用法律不允许限制或排除,则此保固\\n4   声明会被认为在一定程度上允许修改,但是此保固声明的其他部分仍有效\\n由于经过json_normalize()转换后的text已经是DataFrame 类型，导出方法直接将其导出成.csv 格式或.txt。\")]),o._v(\" \"),n(\"p\",[o._v(\"text.to_csv(r'/Users/linxiaoyue/Desktop/rslt.txt', index=False,\\nencoding='utf-8-sig')\\n到这里我们也可以看到，当图片较为清晰、规整时，识别的准确率就会大幅度提高；但是如果当图片有所畸变或是并不规整时，识别的准确率可能就会有所降低并且结果与我们想要的也是相去甚远。当然处理这些不「正常」的情况所需要技术和精力时间会更多。\")]),o._v(\" \"),n(\"p\",[o._v(\"但是就目前的百度 API 接口来说，对于我们日常的一些识别需求已经是完全够用了。\")])])}),[],!1,null,null,null);e.default=_.exports}}]);","extractedComments":[]}